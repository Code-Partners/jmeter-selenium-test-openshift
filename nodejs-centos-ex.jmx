<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loops,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="URL" elementType="Argument">
              <stringProp name="Argument.name">URL</stringProp>
              <stringProp name="Argument.value">${__P(url,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="USERNAME" elementType="Argument">
              <stringProp name="Argument.name">USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(username,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(password,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Program Files (x86)\Selenium WebDriver\ChromeDriver\ChromeDriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var selenium = JavaImporter(org.openqa.selenium) // WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui)
var conditions = support_ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 5) // seconds


// Script arguments - supplied by command line.
var url      = WDS.vars.get(&apos;URL&apos;)
var username = WDS.vars.get(&apos;USERNAME&apos;)
var password = WDS.vars.get(&apos;PASSWORD&apos;)


// Constants.
var PROJECT_NAME = &apos;my-project&apos;
var APP_NAME = &apos;nodejs-centos-ex&apos;


// Convert &apos;num&apos; to a string of length &apos;size&apos; with leading zeroes if required.
// https://stackoverflow.com/a/2998822/1015802
function pad(num, size) {
  var s = num + &apos;&apos;
  while (s.length &lt; size) s = &apos;0&apos; + s
  return s
}


// https://stackoverflow.com/a/23501062/1015802
var threadNum = WDS.ctx.getThreadNum()


// Assume max 999 threads - 3 characters.
var logPrefix = &apos;[&apos; + pad(threadNum, 3) + &apos;] &apos;


// Script variables.
var isDemo = true
var element
var selector


// Start sampling.
WDS.sampleResult.sampleStart()

//WDS.browser.manage().window().setPosition(new selenium.Point(2000, 10))

WDS.log.info(logPrefix + &apos;&gt; GET &apos; + url)
WDS.browser.get(url) // redirects to login URL
WDS.log.info(logPrefix + &apos;&lt; GET &apos; + url + &apos;, Title: &apos; + WDS.browser.getTitle())
if (isDemo)
  java.lang.Thread.sleep(6000)


// username - use wait.until to allow for redirect to login URL
WDS.log.info(logPrefix + &apos;&gt; User name: wait.until presenceOfElementLocated by ID inputUsername&apos;)
element = wait.until(conditions.presenceOfElementLocated(selenium.By.id(&apos;inputUsername&apos;)))
WDS.log.info(logPrefix + &apos;&lt; User name: wait.until presenceOfElementLocated by ID inputUsername&apos;)

WDS.log.info(logPrefix + &apos;&gt; sendKeys(&apos; + username + &apos;)&apos;)
element.sendKeys(username)
WDS.log.info(logPrefix + &apos;&lt; sendKeys(&apos; + username + &apos;)&apos;)
if (isDemo)
  java.lang.Thread.sleep(500)


// password
WDS.log.info(logPrefix + &apos;&gt; Password: findElement by ID inputPassword&apos;)
element = WDS.browser.findElement(selenium.By.id(&apos;inputPassword&apos;))
WDS.log.info(logPrefix + &apos;&lt; Password: findElement by ID inputPassword&apos;)

WDS.log.info(logPrefix + &apos;&gt; sendKeys(&apos; + password + &apos;)&apos;)
element.sendKeys(password)
WDS.log.info(logPrefix + &apos;&lt; sendKeys(&apos; + password + &apos;)&apos;)
if (isDemo)
  java.lang.Thread.sleep(500)


// login button
selector = &apos;button.btn.btn-primary.btn-lg&apos;
WDS.log.info(logPrefix + &apos;&gt; Login button: findElement by CSS &apos; + selector)
element = WDS.browser.findElement(selenium.By.cssSelector(selector))
WDS.log.info(logPrefix + &apos;&lt; Login button: findElement by CSS &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(5000)


// Home page: open created project
WDS.log.info(logPrefix + &apos;&gt; Project: wait.until presenceOfElementLocated by link text &apos; + PROJECT_NAME)
element = wait.until(conditions.presenceOfElementLocated(selenium.By.linkText(PROJECT_NAME)))
WDS.log.info(logPrefix + &apos;&lt; Project: wait.until presenceOfElementLocated by link text &apos; + PROJECT_NAME)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(5000)


// Expand the deployment
selector = &apos;/html/body/div/div/div/div/div/div[2]/div/div/div/div[2]/overview-list-row/div/div/div[1]/div/a/span/span[1]&apos;
WDS.log.info(logPrefix + &apos;&gt; Expand deployment: wait.until presenceOfElementLocated by xpath &apos; + selector)
element = wait.until(conditions.presenceOfElementLocated(selenium.By.xpath(selector)))
WDS.log.info(logPrefix + &apos;&lt; Expand deployment: wait.until presenceOfElementLocated by xpath &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(2000)


// Sidebar: expand Builds menu.
selector = &apos;/html/body/osc-header/sidebar/div/nav/ul/li[3]/a/span[2]&apos;
WDS.log.info(logPrefix + &apos;&gt; Sidebar - expand Builds menu: findElement by xpath &apos; + selector)
element = WDS.browser.findElement(selenium.By.xpath(selector))
WDS.log.info(logPrefix + &apos;&lt; Sidebar - expand Builds menu: findElement by xpath &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(2000)

// Sidebar: click Builds menu item.
selector = &apos;/html/body/osc-header/sidebar/div/nav/ul/li[3]/div/div/ul/li[1]/a/span&apos;
WDS.log.info(logPrefix + &apos;&gt; Sidebar - Builds menu item: findElement by xpath &apos; + selector)
element = WDS.browser.findElement(selenium.By.xpath(selector))
WDS.log.info(logPrefix + &apos;&lt; Sidebar - Builds menu item: findElement by xpath &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(2000)

// Builds view: click link for last build.
//           &apos;/html/body/div/div/div/div/div/div[2]/div/div/div/div[2]/overview-list-row/div/div/div[2]/div[1]/h3/span/a&apos;
selector = &apos;/html/body/div[1]/div/div/div[2]/div/div/div/table/tbody/tr/td[2]/span/a&apos;
WDS.log.info(logPrefix + &apos;&gt; Link for last build: wait.until visibilityOfElementLocated by xpath &apos; + selector)
element = wait.until(conditions.visibilityOfElementLocated(selenium.By.xpath(selector)))
WDS.log.info(logPrefix + &apos;&lt; Link for last build: wait.until visibilityOfElementLocated by xpath &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(5000)

// Builds view: click Logs tab.
selector = &apos;/html/body/div[1]/div/div/div[2]/div/div/div/div/ul/li[3]/a/uib-tab-heading&apos;
WDS.log.info(logPrefix + &apos;&gt; wait.until presenceOfElementLocated by xpath (Logs tab): &apos; + selector)
element = wait.until(conditions.presenceOfElementLocated(selenium.By.xpath(selector)))
WDS.log.info(logPrefix + &apos;&lt; wait.until presenceOfElementLocated by xpath (Logs tab): &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(5000)


// Logout link must be visible in order to click; first expand its parent.
// User dropdown: expand items.
selector = &apos;//*[@id=&quot;user-dropdown&quot;]/span[2]&apos;
WDS.log.info(logPrefix + &apos;&gt; User dropdown: findElement by xpath &apos; + selector)
element = WDS.browser.findElement(selenium.By.xpath(selector))
WDS.log.info(logPrefix + &apos;&lt; User dropdown: findElement by xpath &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(2000)


// logout link
selector = &apos;//a[contains(@href, &quot;logout&quot;)]&apos;
WDS.log.info(logPrefix + &apos;&gt; Logout link: findElement by xpath &apos; + selector)
element = WDS.browser.findElement(selenium.By.xpath(selector))
WDS.log.info(logPrefix + &apos;&lt; Logout link: findElement by xpath &apos; + selector)

WDS.log.info(logPrefix + &apos;&gt; click()&apos;)
element.click()
WDS.log.info(logPrefix + &apos;&lt; click()&apos;)
if (isDemo)
  java.lang.Thread.sleep(2000)


// Stop sampling
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
